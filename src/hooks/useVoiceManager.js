import { useEffect, useRef, useCallback } from 'react';
import { useAppStore } from '../store/appStore';
import { meditations, spiritualMeditations } from '../data/meditations';

export const useVoiceManager = () => {
  const { 
    voiceSettings, 
    currentSession, 
    currentMeditation,
    isSessionActive
  } = useAppStore();
  
  const synth = useRef(window.speechSynthesis);
  const voices = useRef([]);
  const currentUtterance = useRef(null);
  const isInitialized = useRef(false);
  const sessionGuidanceStarted = useRef(false);
  const audioElementRef = useRef(null);
  const audioQueue = useRef([]);
  const isPlayingAudio = useRef(false);
  const timeoutsRef = useRef([]);
  const fullAudioRef = useRef(null);
  
  // Fonction pour cr√©er un timeout qui sera automatiquement suivi
  const createTrackedTimeout = useCallback((callback, delay) => {
    const timeoutId = setTimeout(() => {
      // Supprimer ce timeout de la liste des timeouts actifs
      timeoutsRef.current = timeoutsRef.current.filter(id => id !== timeoutId);
      callback();
    }, delay);
    
    // Ajouter ce timeout √† la liste des timeouts actifs
    timeoutsRef.current.push(timeoutId);
    
    return timeoutId;
  }, []);
  
  // Fonction pour nettoyer tous les timeouts
  const clearAllTimeouts = useCallback(() => {
    console.log(`üßπ Nettoyage de ${timeoutsRef.current.length} timeouts actifs`);
    
    timeoutsRef.current.forEach(id => {
      clearTimeout(id);
    });
    
    timeoutsRef.current = [];
    console.log('‚úÖ Tous les timeouts ont √©t√© nettoy√©s');
  }, []);
  
  // Initialiser les voix
  useEffect(() => {
    const initVoices = () => {
      if (synth.current) {
        voices.current = synth.current.getVoices().filter(voice => 
          voice.lang.includes('fr') || voice.name.includes('French')
        );
        
        if (voices.current.length > 0) {
          isInitialized.current = true;
          console.log('üé§ Voix fran√ßaises disponibles:', voices.current.length);
        } else {
          console.log('‚ö†Ô∏è Aucune voix fran√ßaise trouv√©e, utilisation de la voix par d√©faut');
          voices.current = synth.current.getVoices();
          isInitialized.current = true;
        }
      }
    };
    
    if (synth.current) {
      if (synth.current.getVoices().length > 0) {
        initVoices();
      }
      synth.current.onvoiceschanged = initVoices;
    }
    
    return () => {
      if (synth.current) {
        synth.current.onvoiceschanged = null;
      }
    };
  }, []);
  
  // Nettoyer √† la destruction du composant
  useEffect(() => {
    return () => {
      clearAllTimeouts();
      if (synth.current) {
        synth.current.cancel();
      }
      if (audioElementRef.current) {
        audioElementRef.current.pause();
        audioElementRef.current = null;
      }
      if (fullAudioRef.current) {
        fullAudioRef.current.pause();
        fullAudioRef.current = null;
      }
      audioQueue.current = [];
      isPlayingAudio.current = false;
    };
  }, [clearAllTimeouts]);
  
  // R√©initialiser le guidage vocal lorsque la session change
  useEffect(() => {
    sessionGuidanceStarted.current = false;
    clearAllTimeouts();
  }, [currentSession, currentMeditation, clearAllTimeouts]);
  
  // Arr√™ter le guidage vocal lorsque la session est arr√™t√©e
  useEffect(() => {
    if (!isSessionActive) {
      console.log('üîá Session inactive - ARR√äT COMPLET du guidage vocal');
      clearAllTimeouts();
      
      if (synth.current) {
        synth.current.cancel();
      }
      
      if (audioElementRef.current) {
        audioElementRef.current.pause();
        audioElementRef.current.src = '';
        audioElementRef.current = null;
      }
      
      if (fullAudioRef.current) {
        fullAudioRef.current.pause();
        fullAudioRef.current.src = '';
        fullAudioRef.current = null;
      }
      
      audioQueue.current = [];
      isPlayingAudio.current = false;
      sessionGuidanceStarted.current = false;
      
      // Forcer l'arr√™t de toute synth√®se vocale
      window.speechSynthesis.cancel();
    }
  }, [isSessionActive, clearAllTimeouts]);
  
  // Fonction pour parler avec la synth√®se vocale
  const speakWithSynthesis = useCallback((text) => {
    if (!voiceSettings.enabled || !text) return;
    
    try {
      if (synth.current) {
        synth.current.cancel();
      }
      
      const utterance = new SpeechSynthesisUtterance(text);
      currentUtterance.current = utterance;
      
      if (voices.current.length > 0) {
        utterance.voice = voices.current[0];
      }
      
      utterance.volume = voiceSettings.volume;
      utterance.rate = 0.9;
      utterance.pitch = 1.0;
      utterance.lang = 'fr-FR';
      
      utterance.onstart = () => {
        console.log('üó£Ô∏è SYNTH√àSE VOCALE:', text.substring(0, 50) + '...');
      };
      
      utterance.onend = () => {
        console.log('‚úÖ SYNTH√àSE TERMIN√âE');
        currentUtterance.current = null;
      };
      
      utterance.onerror = (event) => {
        console.error('‚ùå ERREUR SYNTH√àSE:', event);
        currentUtterance.current = null;
      };
      
      synth.current.speak(utterance);
    } catch (error) {
      console.error('‚ùå ERREUR SYNTH√àSE VOCALE:', error);
    }
  }, [voiceSettings.enabled, voiceSettings.volume]);
  
  // Fonction pour jouer le prochain audio dans la file d'attente
  const playNextInQueue = useCallback(() => {
    if (audioQueue.current.length === 0) {
      isPlayingAudio.current = false;
      return;
    }
    
    const nextAudio = audioQueue.current.shift();
    isPlayingAudio.current = true;
    
    console.log('üéµ LECTURE AUDIO PREMIUM:', nextAudio.key, nextAudio.url);
    
    try {
      const audio = new Audio(nextAudio.url);
      audioElementRef.current = audio;
      
      audio.onended = () => {
        console.log('‚úÖ AUDIO PREMIUM TERMIN√â:', nextAudio.key);
        audioElementRef.current = null;
        playNextInQueue();
      };
      
      audio.onerror = (error) => {
        console.error('‚ùå ERREUR AUDIO PREMIUM:', nextAudio.url, error);
        
        if (nextAudio.fallbackText) {
          console.log('üîÑ FALLBACK SYNTH√àSE pour:', nextAudio.key);
          speakWithSynthesis(nextAudio.fallbackText);
        }
        
        audioElementRef.current = null;
        playNextInQueue();
      };
      
      audio.volume = voiceSettings.volume;
      audio.play()
        .catch(error => {
          console.error('‚ùå ERREUR LECTURE:', error);
          if (nextAudio.fallbackText) {
            console.log('üîÑ FALLBACK SYNTH√àSE pour:', nextAudio.key);
            speakWithSynthesis(nextAudio.fallbackText);
          }
          audioElementRef.current = null;
          playNextInQueue();
        });
    } catch (error) {
      console.error('‚ùå ERREUR CR√âATION AUDIO:', error);
      if (nextAudio.fallbackText) {
        speakWithSynthesis(nextAudio.fallbackText);
      }
      playNextInQueue();
    }
  }, [voiceSettings.volume, speakWithSynthesis]);
  
  // Fonction pour ajouter un audio √† la file d'attente
  const queueAudio = useCallback((url, key, fallbackText) => {
    console.log('üéµ TENTATIVE LECTURE AUDIO PREMIUM:', url);
    
    fetch(url, { method: 'HEAD' })
      .then(response => {
        if (response.ok) {
          console.log('‚úÖ FICHIER AUDIO PREMIUM TROUV√â:', url, `(${response.status})`);
          
          audioQueue.current.push({
            url,
            key,
            fallbackText
          });
          
          if (!isPlayingAudio.current) {
            playNextInQueue();
          }
        } else {
          console.log('‚ùå FICHIER AUDIO PREMIUM NON TROUV√â:', url, `(${response.status})`);
          
          if (fallbackText) {
            console.log('üîÑ FALLBACK SYNTH√àSE pour:', key);
            speakWithSynthesis(fallbackText);
          }
        }
      })
      .catch(error => {
        console.error('‚ùå ERREUR V√âRIFICATION AUDIO:', error, url);
        
        if (fallbackText) {
          console.log('üîÑ FALLBACK SYNTH√àSE pour:', key);
          speakWithSynthesis(fallbackText);
        }
      });
  }, [playNextInQueue, speakWithSynthesis]);
  
  // Fonction principale pour parler
  const speak = useCallback((text, audioKey = null) => {
    if (!voiceSettings.enabled || !text) return;
    
    const gender = voiceSettings.gender;
    let audioPath = null;
    
    // SYST√àME PREMIUM POUR M√âDITATIONS
    if (currentSession === 'meditation' && currentMeditation && audioKey) {
      if (currentMeditation === 'gratitude') {
        audioPath = `/audio/meditation/${gender}/gratitude-${audioKey}.mp3`;
        console.log(`üôè M√âDITATION GRATITUDE - Audio premium: ${audioPath} (${audioKey})`);
      } else if (currentMeditation === 'abundance') {
        audioPath = `/audio/meditation/${gender}/abundance-${audioKey}.mp3`;
        console.log(`üí∞ M√âDITATION ABONDANCE - Audio premium: ${audioPath} (${audioKey})`);
      } else if (currentMeditation === 'metatron') {
        // M√©tatron utilise un fichier complet
        audioPath = `/audio/meditation/${gender}/metatron.mp3`;
        console.log(`üåü M√âDITATION M√âTATRON - Audio complet: ${audioPath}`);
      }
    }
    
    // SYST√àME PREMIUM POUR SCAN CORPOREL
    else if (currentSession === 'scan' && audioKey) {
      audioPath = `/audio/scan-corporel/${gender}/${audioKey}.mp3`;
      console.log(`üß† SCAN CORPOREL - Audio premium: ${audioPath} (${audioKey})`);
    }
    
    // SYST√àME PREMIUM POUR SOS STRESS
    else if (currentSession === 'switch') {
      if (text.includes('Bienvenue dans votre bulle')) {
        audioPath = `/audio/sos-stress/${gender}/welcome.mp3`;
        audioKey = 'welcome';
      } else if (text.includes('Inspirez le calme')) {
        audioPath = `/audio/sos-stress/${gender}/breathe-calm.mp3`;
        audioKey = 'breathe-calm';
      } else if (text.includes('Vos pieds touchent le sol')) {
        audioPath = `/audio/sos-stress/${gender}/grounding.mp3`;
        audioKey = 'grounding';
      } else if (text.includes('Soufflez doucement')) {
        audioPath = `/audio/sos-stress/${gender}/breathe-softly.mp3`;
        audioKey = 'breathe-softly';
      } else if (text.includes('Accueillez l\'air frais')) {
        audioPath = `/audio/sos-stress/${gender}/breathe-fresh.mp3`;
        audioKey = 'breathe-fresh';
      } else if (text.includes('Le stress s\'√©vapore')) {
        audioPath = `/audio/sos-stress/${gender}/stress-release.mp3`;
        audioKey = 'stress-release';
      } else if (text.includes('Rel√¢chez tout')) {
        audioPath = `/audio/sos-stress/${gender}/breathe-release.mp3`;
        audioKey = 'breathe-release';
      } else if (text.includes('Vous retrouvez votre centre')) {
        audioPath = `/audio/sos-stress/${gender}/center-peace.mp3`;
        audioKey = 'center-peace';
      } else if (text.includes('Parfait. Vous avez retrouv√©')) {
        audioPath = `/audio/sos-stress/${gender}/completion.mp3`;
        audioKey = 'completion';
      }
    }
    
    // Si un fichier audio premium a √©t√© trouv√©, l'utiliser
    if (audioPath && audioKey) {
      console.log(`üé§ PREMIUM: ${audioKey} - ${text.substring(0, 30)}... (${gender})`);
      queueAudio(audioPath, audioKey, text);
    } else {
      // Sinon, utiliser la synth√®se vocale
      console.log(`üó£Ô∏è SYNTH√àSE: "${text.substring(0, 30)}..."`);
      speakWithSynthesis(text);
    }
  }, [voiceSettings.enabled, voiceSettings.gender, currentSession, currentMeditation, queueAudio, speakWithSynthesis]);
  
  // Fonction pour arr√™ter toute parole
  const stop = useCallback(() => {
    console.log('üîá ARR√äT COMPLET du syst√®me vocal');
    
    clearAllTimeouts();
    
    if (synth.current) {
      synth.current.cancel();
    }
    
    if (audioElementRef.current) {
      audioElementRef.current.pause();
      audioElementRef.current.src = '';
      audioElementRef.current = null;
    }
    
    if (fullAudioRef.current) {
      fullAudioRef.current.pause();
      fullAudioRef.current.src = '';
      fullAudioRef.current = null;
    }
    
    audioQueue.current = [];
    isPlayingAudio.current = false;
    sessionGuidanceStarted.current = false;
    
    // Forcer l'arr√™t de toute synth√®se vocale
    window.speechSynthesis.cancel();
    
    return true;
  }, [clearAllTimeouts]);
  
  // Fonction pour d√©marrer le guidage vocal SOS Stress
  const startSosStressGuidance = useCallback(() => {
    if (!voiceSettings.enabled || !isSessionActive) {
      console.log('üîá Guidage SOS Stress d√©sactiv√©');
      return false;
    }
    
    console.log('üö® D√âMARRAGE SOS STRESS COMPLET');
    clearAllTimeouts();
    
    // S√©quence 1 - Accueil (0.5s)
    createTrackedTimeout(() => {
      speak("Bienvenue dans votre bulle de calme. Posez vos pieds bien √† plat sur le sol. D√©tendez vos √©paules.", "welcome");
    }, 500);
    
    // S√©quence 2 - Inspiration (12s)
    createTrackedTimeout(() => {
      speak("Inspirez le calme", "breathe-calm");
    }, 12000);
    
    // S√©quence 3 - Ancrage (28s)
    createTrackedTimeout(() => {
      speak("Vos pieds touchent le sol. Vous √™tes ancr√©, solide, stable.", "grounding");
    }, 28000);
    
    // S√©quence 4 - Expiration (37s)
    createTrackedTimeout(() => {
      speak("Soufflez doucement", "breathe-softly");
    }, 37000);
    
    // S√©quence 5 - Inspiration (48s)
    createTrackedTimeout(() => {
      speak("Accueillez l'air frais", "breathe-fresh");
    }, 48000);
    
    // S√©quence 6 - Lib√©ration (58s)
    createTrackedTimeout(() => {
      speak("Le stress s'√©vapore √† chaque souffle. Votre corps se d√©tend profond√©ment.", "stress-release");
    }, 58000);
    
    // S√©quence 7 - Expiration (67s)
    createTrackedTimeout(() => {
      speak("Rel√¢chez tout", "breathe-release");
    }, 67000);
    
    // S√©quence 8 - Recentrage (78s)
    createTrackedTimeout(() => {
      speak("Vous retrouvez votre centre. Tout va bien. Vous √™tes en s√©curit√©.", "center-peace");
    }, 78000);
    
    // S√©quence 9 - Fin (85s)
    createTrackedTimeout(() => {
      speak("Parfait. Vous avez retrouv√© votre calme int√©rieur. Gardez cette sensation avec vous.", "completion");
    }, 85000);
    
    return true;
  }, [voiceSettings.enabled, isSessionActive, speak, clearAllTimeouts, createTrackedTimeout]);
  
  // Fonction pour d√©marrer le guidage vocal Scan Corporel
  const startScanGuidance = useCallback(() => {
    if (!voiceSettings.enabled || !isSessionActive) {
      console.log('üîá Guidage Scan d√©sactiv√©');
      return false;
    }
    
    console.log('üß† D√âMARRAGE SCAN CORPOREL COMPLET - SYST√àME CORRIG√â');
    clearAllTimeouts();
    
    // S√©quence 1 - Accueil (0s) - IMM√âDIAT
    console.log('üß† SCAN: S√©quence 1 - Accueil (0s)');
    speak("Bienvenue dans cette s√©ance de scan corporel. Installez-vous confortablement, fermez les yeux si vous le souhaitez. Nous allons explorer chaque partie de votre corps pour une relaxation profonde.", "welcome");
    
    // S√©quence 2 - T√™te (30s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 2 - T√™te (30s)');
      if (!isSessionActive) {
        console.log('‚ö†Ô∏è Session inactive, arr√™t du guidage');
        return;
      }
      speak("Portez votre attention sur le sommet de votre t√™te. Sentez cette zone se d√©tendre compl√®tement.", "head");
    }, 30000);
    
    // S√©quence 3 - Visage (60s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 3 - Visage (60s)');
      if (!isSessionActive) return;
      speak("Descendez vers votre visage. Rel√¢chez votre front, vos sourcils, vos paupi√®res. D√©tendez vos m√¢choires, votre langue, votre gorge.", "face");
    }, 60000);
    
    // S√©quence 4 - Cou (90s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 4 - Cou (90s)');
      if (!isSessionActive) return;
      speak("Votre cou et vos √©paules se rel√¢chent maintenant. Laissez partir toute tension accumul√©e dans cette zone.", "neck");
    }, 90000);
    
    // S√©quence 5 - Poitrine (120s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 5 - Poitrine (120s)');
      if (!isSessionActive) return;
      speak("Votre poitrine s'ouvre et se d√©tend √† chaque respiration. Sentez l'air qui entre et qui sort librement.", "chest");
    }, 120000);
    
    // S√©quence 6 - Dos (150s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 6 - Dos (150s)');
      if (!isSessionActive) return;
      speak("Votre dos se d√©tend vert√®bre par vert√®bre, du haut vers le bas. Chaque vert√®bre s'aligne parfaitement.", "back");
    }, 150000);
    
    // S√©quence 7 - Ventre (180s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 7 - Ventre (180s)');
      if (!isSessionActive) return;
      speak("Votre ventre se gonfle et se d√©gonfle naturellement, sans effort. Sentez une douce chaleur s'y r√©pandre.", "abdomen");
    }, 180000);
    
    // S√©quence 8 - Hanches (210s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 8 - Hanches (210s)');
      if (!isSessionActive) return;
      speak("Vos hanches et votre bassin se rel√¢chent compl√®tement. Sentez le poids de votre corps s'enfoncer dans le support.", "hips");
    }, 210000);
    
    // S√©quence 9 - Cuisses (240s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 9 - Cuisses (240s)');
      if (!isSessionActive) return;
      speak("Vos cuisses se d√©tendent profond√©ment. Toute tension s'√©vapore √† chaque expiration.", "thighs");
    }, 240000);
    
    // S√©quence 10 - Genoux (255s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 10 - Genoux (255s)');
      if (!isSessionActive) return;
      speak("Vos genoux se d√©tendent. Sentez l'espace dans vos articulations.", "knees");
    }, 255000);
    
    // S√©quence 11 - Mollets (270s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 11 - Mollets (270s)');
      if (!isSessionActive) return;
      speak("Vos mollets se rel√¢chent enti√®rement. Sentez l'√©nergie circuler librement.", "calves");
    }, 270000);
    
    // S√©quence 12 - Chevilles (285s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 12 - Chevilles (285s)');
      if (!isSessionActive) return;
      speak("Vos chevilles se d√©tendent. Sentez l'espace dans ces articulations.", "ankles");
    }, 285000);
    
    // S√©quence 13 - Pieds (300s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 13 - Pieds (300s)');
      if (!isSessionActive) return;
      speak("Vos pieds, jusqu'au bout de vos orteils, sont maintenant compl√®tement d√©tendus et lourds.", "feet");
    }, 300000);
    
    // S√©quence 14 - Corps entier (360s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 14 - Corps entier (360s)');
      if (!isSessionActive) return;
      speak("Une vague de bien-√™tre parcourt maintenant tout votre corps, de la t√™te aux pieds. Vous √™tes dans un √©tat de relaxation profonde.", "wholebody");
    }, 360000);
    
    // S√©quence 15 - Respiration (420s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 15 - Respiration (420s)');
      if (!isSessionActive) return;
      speak("Observez votre respiration, calme et r√©guli√®re. Chaque inspiration vous apporte √©nergie et vitalit√©.", "breathing");
    }, 420000);
    
    // S√©quence 16 - Conscience (480s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 16 - Conscience (480s)');
      if (!isSessionActive) return;
      speak("Prenez conscience de votre corps dans son ensemble, parfaitement d√©tendu et en harmonie.", "awareness");
    }, 480000);
    
    // S√©quence 17 - Pr√©sence (540s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 17 - Pr√©sence (540s)');
      if (!isSessionActive) return;
      speak("Restez dans cet √©tat de relaxation profonde, en pleine conscience de votre corps et de votre respiration.", "presence");
    }, 540000);
    
    // S√©quence 18 - Fin (570s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üß† SCAN: S√©quence 18 - Fin (570s)');
      if (!isSessionActive) return;
      speak("Progressivement, reprenez conscience de votre environnement. Bougez doucement vos doigts, vos orteils. Votre corps est maintenant compl√®tement d√©tendu.", "completion");
    }, 570000);
    
    console.log('‚úÖ SCAN CORPOREL: Tous les timeouts programm√©s');
    return true;
  }, [voiceSettings.enabled, isSessionActive, speak, clearAllTimeouts, createTrackedTimeout]);
  
  // Fonction pour d√©marrer le guidage vocal Gratitude
  const startGratitudeGuidance = useCallback(() => {
    if (!voiceSettings.enabled || !isSessionActive) {
      console.log('üîá Guidage Gratitude d√©sactiv√©');
      return false;
    }
    
    console.log('üôè D√âMARRAGE M√âDITATION GRATITUDE COMPL√àTE - SYST√àME CORRIG√â');
    clearAllTimeouts();
    
    // S√©quence 1 - Installation (0s) - IMM√âDIAT
    console.log('üôè GRATITUDE: S√©quence 1 - Installation (0s)');
    speak("Bienvenue dans cette m√©ditation de gratitude. Installez-vous confortablement, le dos droit, les pieds bien ancr√©s au sol. Fermez doucement les yeux et prenez conscience de votre respiration naturelle.", "installation");
    
    // S√©quence 2 - Coh√©rence setup (30s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 2 - Coh√©rence setup (30s)');
      if (!isSessionActive) return;
      speak("Commen√ßons par √©tablir un rythme respiratoire apaisant. Inspirez profond√©ment par le nez pendant 5 secondes... Expirez doucement par la bouche pendant 5 secondes...", "coherence-setup");
    }, 30000);
    
    // S√©quence 3 - Respiration c≈ìur (60s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 3 - Respiration c≈ìur (60s)');
      if (!isSessionActive) return;
      speak("Portez maintenant votre attention sur votre c≈ìur. Imaginez que vous respirez directement par le centre de votre poitrine.", "breathing-heart");
    }, 60000);
    
    // S√©quence 4 - √âveil gratitude (90s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 4 - √âveil gratitude (90s)');
      if (!isSessionActive) return;
      speak("√âveillez maintenant le sentiment de gratitude. Commencez simplement, par les choses les plus √©videntes.", "awakening");
    }, 90000);
    
    // S√©quence 5 - Premi√®re gratitude (120s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 5 - Premi√®re gratitude (120s)');
      if (!isSessionActive) return;
      speak("Inspirez... et pensez √† une chose pour laquelle vous √™tes profond√©ment reconnaissant aujourd'hui. Expirez... et laissez cette gratitude rayonner.", "first");
    }, 120000);
    
    // S√©quence 6 - Proches (150s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 6 - Proches (150s)');
      if (!isSessionActive) return;
      speak("√âlargissez maintenant votre gratitude vers les personnes qui enrichissent votre vie. Visualisez le visage d'un √™tre cher.", "loved-ones");
    }, 150000);
    
    // S√©quence 7 - Corps (180s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 7 - Corps (180s)');
      if (!isSessionActive) return;
      speak("Dirigez maintenant votre gratitude vers votre corps, ce v√©hicule extraordinaire qui vous permet de vivre chaque exp√©rience.", "body");
    }, 180000);
    
    // S√©quence 8 - Nature (210s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 8 - Nature (210s)');
      if (!isSessionActive) return;
      speak("√âlargissez encore votre gratitude vers la nature et l'univers. Remerciez le soleil qui vous r√©chauffe, l'eau qui vous d√©salt√®re.", "nature");
    }, 210000);
    
    // S√©quence 9 - Ancrage (240s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 9 - Ancrage (240s)');
      if (!isSessionActive) return;
      speak("Ancrez maintenant cette √©nergie de gratitude dans chaque cellule de votre corps. La gratitude transforme ce que vous avez en suffisance.", "anchoring");
    }, 240000);
    
    // S√©quence 10 - Int√©gration (270s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 10 - Int√©gration (270s)');
      if (!isSessionActive) return;
      speak("Int√©grez pleinement cette √©nergie de gratitude. Laissez-la rayonner √† travers vous, transformant votre perception du monde.", "integration");
    }, 270000);
    
    // S√©quence 11 - Conclusion (285s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üôè GRATITUDE: S√©quence 11 - Conclusion (285s)');
      if (!isSessionActive) return;
      speak("Doucement, prenez une respiration plus profonde. Remerciez-vous pour ce moment de connexion. Quand vous √™tes pr√™t, ouvrez les yeux.", "conclusion");
    }, 285000);
    
    console.log('‚úÖ GRATITUDE: Tous les timeouts programm√©s');
    return true;
  }, [voiceSettings.enabled, isSessionActive, speak, clearAllTimeouts, createTrackedTimeout]);
  
  // Fonction pour d√©marrer le guidage vocal Abondance
  const startAbundanceGuidance = useCallback(() => {
    if (!voiceSettings.enabled || !isSessionActive) {
      console.log('üîá Guidage Abondance d√©sactiv√©');
      return false;
    }
    
    console.log('üí∞ D√âMARRAGE M√âDITATION ABONDANCE COMPL√àTE - SYST√àME CORRIG√â');
    clearAllTimeouts();
    
    // S√©quence 1 - Introduction (0s) - IMM√âDIAT
    console.log('üí∞ ABONDANCE: S√©quence 1 - Introduction (0s)');
    speak("Bienvenue dans cette m√©ditation de coh√©rence cardiaque int√©grative sur la loi de l'attraction. Installez-vous confortablement, le dos droit, les pieds bien ancr√©s au sol.", "introduction");
    
    // S√©quence 2 - Rythme (30s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 2 - Rythme (30s)');
      if (!isSessionActive) return;
      speak("Inspirez profond√©ment par le nez pendant 5 secondes... Expirez doucement par la bouche pendant 5 secondes...", "rhythm-start");
    }, 30000);
    
    // S√©quence 3 - √ânergie (40s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 3 - √ânergie (40s)');
      if (!isSessionActive) return;
      speak("Inspirez... l'univers vous remplit d'√©nergie positive... Expirez... lib√©rez toute tension...", "energy-breath");
    }, 40000);
    
    // S√©quence 4 - Abondance (50s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 4 - Abondance (50s)');
      if (!isSessionActive) return;
      speak("Inspirez... accueillez l'abondance... Expirez... laissez partir les doutes...", "abundance-breath");
    }, 50000);
    
    // S√©quence 5 - Coh√©rence (60s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 5 - Coh√©rence (60s)');
      if (!isSessionActive) return;
      speak("Votre c≈ìur entre en coh√©rence, cr√©ant un champ magn√©tique puissant autour de vous.", "coherence");
    }, 60000);
    
    // S√©quence 6 - Visualisation (65s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 6 - Visualisation (65s)');
      if (!isSessionActive) return;
      speak("Maintenant, tout en gardant ce rythme respiratoire, visualisez clairement ce que vous d√©sirez manifester.", "visualize");
    }, 65000);
    
    // S√©quence 7 - R√©alisation (73s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 7 - R√©alisation (73s)');
      if (!isSessionActive) return;
      speak("Inspirez... voyez votre d√©sir comme d√©j√† r√©alis√©... Expirez... ressentez la gratitude...", "realization-breath");
    }, 73000);
    
    // S√©quence 8 - Cellulaire (83s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 8 - Cellulaire (83s)');
      if (!isSessionActive) return;
      speak("Inspirez... impr√©gnez chaque cellule de cette vision... Expirez... rayonnez cette √©nergie...", "cellular-breath");
    }, 83000);
    
    // S√©quence 9 - Amplification (93s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 9 - Amplification (93s)');
      if (!isSessionActive) return;
      speak("Votre c≈ìur coh√©rent amplifie votre pouvoir de manifestation.", "amplify");
    }, 93000);
    
    // S√©quence 10 - M√©rite (98s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 10 - M√©rite (98s)');
      if (!isSessionActive) return;
      speak("Inspirez... Je suis digne de recevoir... Expirez... J'attire naturellement ce qui est bon pour moi...", "worthy-breath");
    }, 98000);
    
    // S√©quence 11 - Joie (108s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 11 - Joie (108s)');
      if (!isSessionActive) return;
      speak("Inspirez... sentez la joie de la r√©alisation... Expirez... ancrez cette certitude...", "joy-breath");
    }, 108000);
    
    // S√©quence 12 - Univers (118s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 12 - Univers (118s)');
      if (!isSessionActive) return;
      speak("L'univers conspire en votre faveur. Votre vibration attire ce qui lui correspond.", "universe");
    }, 118000);
    
    // S√©quence 13 - Co-cr√©ation (125s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 13 - Co-cr√©ation (125s)');
      if (!isSessionActive) return;
      speak("Inspirez... Je co-cr√©e avec l'univers... Expirez... Tout se met en place parfaitement...", "cocreate-breath");
    }, 125000);
    
    // S√©quence 14 - Gratitude (135s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 14 - Gratitude (135s)');
      if (!isSessionActive) return;
      speak("Inspirez... amplifiez le sentiment de gratitude... Expirez... diffusez votre lumi√®re...", "gratitude-breath");
    }, 135000);
    
    // S√©quence 15 - Cycle manifestation (145s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 15 - Cycle manifestation (145s)');
      if (!isSessionActive) return;
      speak("Continuez ce rythme de respiration consciente. √Ä chaque inspiration, vous attirez vos d√©sirs. √Ä chaque expiration, vous l√¢chez prise avec confiance.", "manifestation-cycle");
    }, 145000);
    
    // S√©quence 16 - Ancrage (300s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 16 - Ancrage (300s)');
      if (!isSessionActive) return;
      speak("Continuez √† respirer en coh√©rence cardiaque, sachant que votre d√©sir est en route vers vous.", "anchor");
    }, 300000);
    
    // S√©quence 17 - Alignement (318s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 17 - Alignement (318s)');
      if (!isSessionActive) return;
      speak("Inspirez... Je suis align√© avec mes d√©sirs... Expirez... Je l√¢che prise avec confiance...", "alignment");
    }, 318000);
    
    // S√©quence 18 - Boussole (328s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 18 - Boussole (328s)');
      if (!isSessionActive) return;
      speak("Votre c≈ìur coh√©rent est votre boussole vers l'abondance.", "compass");
    }, 328000);
    
    // S√©quence 19 - Fin (333s) - FORC√â
    createTrackedTimeout(() => {
      console.log('üí∞ ABONDANCE: S√©quence 19 - Fin (333s)');
      if (!isSessionActive) return;
      speak("Doucement, prenez une respiration plus profonde. Remerciez-vous pour ce moment de connexion et de cr√©ation.", "completion");
    }, 333000);
    
    console.log('‚úÖ ABONDANCE: Tous les timeouts programm√©s');
    return true;
  }, [voiceSettings.enabled, isSessionActive, speak, clearAllTimeouts, createTrackedTimeout]);
  
  // Fonction pour d√©marrer le guidage vocal M√©tatron
  const startMetatronGuidance = useCallback(() => {
    if (!voiceSettings.enabled || !isSessionActive) {
      console.log('üîá Guidage M√©tatron d√©sactiv√©');
      return false;
    }
    
    console.log('üåü D√âMARRAGE M√âDITATION M√âTATRON');
    clearAllTimeouts();
    
    const gender = voiceSettings.gender;
    const audioPath = `/audio/meditation/${gender}/metatron.mp3`;
    const fallbackText = "Bienvenue dans cette m√©ditation d'invocation de l'archange M√©tatron. Installez-vous confortablement et fermez les yeux.";
    
    // Essayer de jouer le fichier audio complet
    console.log('üéµ TENTATIVE LECTURE M√âTATRON COMPLET:', audioPath);
    
    fetch(audioPath, { method: 'HEAD' })
      .then(response => {
        if (response.ok) {
          console.log('‚úÖ FICHIER M√âTATRON TROUV√â:', audioPath);
          
          const audio = new Audio(audioPath);
          fullAudioRef.current = audio;
          
          audio.onended = () => {
            console.log('‚úÖ M√âDITATION M√âTATRON TERMIN√âE');
            fullAudioRef.current = null;
          };
          
          audio.onerror = (error) => {
            console.error('‚ùå ERREUR AUDIO M√âTATRON:', error);
            speakWithSynthesis(fallbackText);
            fullAudioRef.current = null;
          };
          
          audio.volume = voiceSettings.volume;
          audio.play()
            .catch(error => {
              console.error('‚ùå ERREUR LECTURE M√âTATRON:', error);
              speakWithSynthesis(fallbackText);
              fullAudioRef.current = null;
            });
        } else {
          console.log('‚ùå FICHIER M√âTATRON NON TROUV√â, fallback synth√®se');
          speakWithSynthesis(fallbackText);
        }
      })
      .catch(error => {
        console.error('‚ùå ERREUR V√âRIFICATION M√âTATRON:', error);
        speakWithSynthesis(fallbackText);
      });
    
    return true;
  }, [voiceSettings.enabled, voiceSettings.gender, voiceSettings.volume, isSessionActive, speakWithSynthesis, clearAllTimeouts]);
  
  // Fonction principale pour d√©marrer le guidage vocal
  const startSessionGuidance = useCallback(() => {
    if (!voiceSettings.enabled || !isSessionActive) {
      console.log('üîá Guidage vocal d√©sactiv√© ou session inactive');
      return false;
    }
    
    if (sessionGuidanceStarted.current) {
      console.log('‚ö†Ô∏è Guidage vocal d√©j√† d√©marr√©');
      return false;
    }
    
    sessionGuidanceStarted.current = true;
    console.log('üé§ D√âMARRAGE GUIDAGE - Session:', currentSession, 'M√©ditation:', currentMeditation);
    
    // Router vers la bonne fonction selon la session
    if (currentSession === 'switch') {
      return startSosStressGuidance();
    } else if (currentSession === 'scan') {
      return startScanGuidance();
    } else if (currentSession === 'meditation' && currentMeditation === 'gratitude') {
      return startGratitudeGuidance();
    } else if (currentSession === 'meditation' && currentMeditation === 'abundance') {
      return startAbundanceGuidance();
    } else if (currentSession === 'meditation' && currentMeditation === 'metatron') {
      return startMetatronGuidance();
    } else {
      // Guidage g√©n√©rique pour les autres sessions
      speak("Bienvenue dans votre session. Suivez le rythme respiratoire et laissez-vous guider.");
      return true;
    }
  }, [currentSession, currentMeditation, startSosStressGuidance, startScanGuidance, startGratitudeGuidance, startAbundanceGuidance, startMetatronGuidance, speak, voiceSettings.enabled, isSessionActive]);
  
  return {
    speak,
    stop,
    clearAllTimeouts,
    startSessionGuidance: useCallback(() => {
      sessionGuidanceStarted.current = false;
      clearAllTimeouts();
      return startSessionGuidance();
    }, [startSessionGuidance, clearAllTimeouts]),
    isInitialized: isInitialized.current,
  };
};