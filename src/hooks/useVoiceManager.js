import { useRef, useCallback } from 'react';
import { useAppStore } from '../store/appStore';

export const useVoiceManager = () => {
  const { voiceSettings, currentSession, currentMeditation, isSessionActive } = useAppStore();
  const timeoutsRef = useRef(new Set());
  const currentUtteranceRef = useRef(null);

  // Fonction pour nettoyer tous les timeouts
  const clearAllTimeouts = useCallback(() => {
    console.log('üßπ Nettoyage de tous les timeouts vocaux');
    timeoutsRef.current.forEach(timeoutId => {
      clearTimeout(timeoutId);
    });
    timeoutsRef.current.clear();
  }, []);

  // Fonction pour arr√™ter toute synth√®se vocale
  const stop = useCallback(() => {
    console.log('üîá ARR√äT COMPLET du syst√®me vocal');
    
    // Arr√™ter la synth√®se vocale
    if (window.speechSynthesis) {
      window.speechSynthesis.cancel();
    }
    
    // Arr√™ter l'utterance actuelle
    if (currentUtteranceRef.current) {
      currentUtteranceRef.current = null;
    }
    
    // Nettoyer tous les timeouts
    clearAllTimeouts();
  }, [clearAllTimeouts]);

  // Fonction principale de synth√®se vocale
  const speak = useCallback((text) => {
    if (!voiceSettings.enabled || !text) {
      console.log('üîá Voix d√©sactiv√©e ou texte vide');
      return false;
    }

    console.log('üé§ SPEAK SIMPLE:', text);

    try {
      // Arr√™ter toute synth√®se en cours
      if (window.speechSynthesis) {
        window.speechSynthesis.cancel();
      }

      // Cr√©er une nouvelle utterance
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'fr-FR';
      utterance.rate = 0.8;
      utterance.pitch = 1.0;
      utterance.volume = voiceSettings.volume || 0.7;

      // Stocker la r√©f√©rence
      currentUtteranceRef.current = utterance;

      // √âv√©nements
      utterance.onstart = () => {
        console.log('üé§ SYNTH√àSE D√âMARR√âE');
      };

      utterance.onend = () => {
        console.log('‚úÖ SYNTH√àSE TERMIN√âE');
        currentUtteranceRef.current = null;
      };

      utterance.onerror = (event) => {
        console.log('‚ùå ERREUR SYNTH√àSE:', event.error);
        currentUtteranceRef.current = null;
      };

      // Lancer la synth√®se
      window.speechSynthesis.speak(utterance);
      console.log('üó£Ô∏è SYNTH√àSE LANC√âE');
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur speak:', error);
      return false;
    }
  }, [voiceSettings.enabled, voiceSettings.volume]);

  // Fonction de d√©marrage de session simplifi√©e
  const startSessionGuidance = useCallback(() => {
    if (!voiceSettings.enabled || !isSessionActive) {
      console.log('üîá Guidage vocal d√©sactiv√© ou session inactive');
      return false;
    }

    console.log('üé§ START SESSION GUIDANCE SIMPLE - Session:', currentSession);

    // Nettoyer les anciens timeouts
    clearAllTimeouts();

    // Message de bienvenue imm√©diat
    const welcomeMessage = currentSession === 'scan' 
      ? "Bienvenue dans cette s√©ance de scan corporel. Installez-vous confortablement."
      : currentSession === 'switch'
      ? "Bienvenue dans votre bulle de calme. Posez vos pieds bien √† plat sur le sol."
      : "Bienvenue dans votre session. Le guidage vocal fonctionne.";

    // Parler imm√©diatement
    speak(welcomeMessage);

    // Messages programm√©s pour le scan corporel
    if (currentSession === 'scan') {
      const timeout1 = setTimeout(() => {
        speak("Portez votre attention sur le sommet de votre t√™te. Sentez cette zone se d√©tendre compl√®tement.");
      }, 30000); // 30 secondes

      const timeout2 = setTimeout(() => {
        speak("Descendez vers votre visage. Rel√¢chez votre front, vos sourcils, vos paupi√®res.");
      }, 60000); // 1 minute

      const timeout3 = setTimeout(() => {
        speak("Votre cou et vos √©paules se rel√¢chent maintenant. Laissez partir toute tension.");
      }, 90000); // 1 minute 30

      // Stocker les timeouts
      timeoutsRef.current.add(timeout1);
      timeoutsRef.current.add(timeout2);
      timeoutsRef.current.add(timeout3);
    }

    return true;
  }, [voiceSettings.enabled, isSessionActive, currentSession, speak, clearAllTimeouts]);

  return {
    speak,
    stop,
    startSessionGuidance,
    clearAllTimeouts
  };
};